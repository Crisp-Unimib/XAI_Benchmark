from .Metric import Metric
import logging
from utilities import ExplanationType, ExplanationScope, MetricCategory, jaccard_similarity

logger = logging.getLogger(__name__)


class ChangeSeedMetric(Metric):
    """
    A metric that compares the stability of explanations generated with different seeds.

    This metric measures the stability of explanations generated by an explainer using different random seeds.
    It compares the explanations generated with two different seeds and determines if they are stable or not.

    Attributes:
        dataset (Dataset): The dataset used for evaluation.
        explainer (Explainer): The explainer used for generating explanations.
        scope (ExplanationScope): The scope of the explanation.
        explanation_type (ExplanationType): The type of explanation.
        metric_category (MetricCategory): The category of the metric.

    """

    def __init__(self, dataset, explainer, **kwargs):
        """
        Initializes a ChangeSeedMetric object.

        Args:
            dataset (Dataset): The dataset used for evaluation.
            explainer (Explainer): The explainer used for generating explanations.
            **kwargs: Additional keyword arguments.

        """
        super().__init__(dataset, explainer, **kwargs)
        self.scope = ExplanationScope.ANY
        self.explanation_type = ExplanationType.ANY
        self.metric_category = MetricCategory.STABILITY
        self.validate_explainer()

    def __call__(self, instance=None):
        """
        Compare the stability of explanations generated with different seeds.

        Returns:
            bool: True if the explanations are stable, False otherwise.
        """
        if instance is None:
            instance = self.dataset.X[0]

        if self.explainer.scope.value == 'local':
            self.explainer.set_seed(42)
            explanation1 = self.explainer(instance)

            self.explainer.set_seed(99)
            explanation2 = self.explainer(instance)
        else:
            self.explainer.set_seed(42)
            explanation1 = self.explainer()

            self.explainer.set_seed(99)
            explanation2 = self.explainer()

        # Compare explanations
        # The method of comparison will depend on the format of the explanations
        explanation_length = min(len(explanation1), len(explanation1))
        if self.explainer.explanation_type.value == 'rule_based':
            for i in range(explanation_length):
                return jaccard_similarity(explanation1[i], explanation2[i])

        for i in range(explanation_length):
            return 1 - abs(explanation1[i][1] - explanation2[i][1])
