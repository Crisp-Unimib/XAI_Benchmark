from .Metric import Metric
import logging
from utilities import ExplanationType, ExplanationScope, MetricCategory
from scipy.stats import entropy
import numpy as np

logger = logging.getLogger(__name__)


class ComplexityMetric(Metric):
    """
    A metric for measuring the complexity of explanations generated by an explainer.

    Args:
        dataset: The dataset used for evaluation.
        explainer: The explainer used for generating explanations.
        **kwargs: Additional keyword arguments.

    Attributes:
        scope: The scope of the explanation (global or local).
        explanation_type: The type of explanation (feature or instance).
        metric_category: The category of the metric (parsimony).
    """

    def __init__(self, dataset, explainer, **kwargs):
        """
        Initializes a ComplexityMetric object.

        Args:
            dataset: The dataset used for evaluation.
            explainer: The explainer used for generating explanations.
            **kwargs: Additional keyword arguments.
        """
        super().__init__(dataset, explainer, **kwargs)
        self.scope = ExplanationScope.ANY
        self.explanation_type = ExplanationType.FEATURE
        self.metric_category = MetricCategory.PARSIMONY
        self.validate_explainer()

    def __call__(self, instance=None):
        """
        Calculate the complexity metric.

        Parameters:
            instance (optional): The instance for which to calculate the complexity metric. 
                                 If not provided, the complexity metric is calculated globally.

        Returns:
            The complexity metric value.

        Raises:
            ValueError: If instance is not provided for local explanation.
        """

        # Retrieve rules from the explainer
        if self.explainer.scope.value in ['global', 'any']:
            explanation = self.explainer()
        else:
            # Local case
            if instance is None:
                instance = self.dataset.X[0]
            explanation = self.explainer(instance)

        # Calculate the complexity metric
        if isinstance(explanation[0], list):
            exp_values = [[abs(x[1]) for x in e]
                          for e in explanation]
            return np.average([1 - entropy(e, base=len(e)) for e in exp_values])

        exp_values = [abs(x[1]) for x in explanation]
        return 1 - entropy(exp_values, base=len(exp_values))
